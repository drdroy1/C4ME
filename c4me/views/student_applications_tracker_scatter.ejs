<!-- Code from d3-graph-gallery.com -->
<!DOCTYPE html>
<meta charset="utf-8" />

<!-- Load d3.js -->
<script src="https://d3js.org/d3.v4.js"></script>

<!-- Create a div where the graph will take place -->
<div id="my_dataviz"></div>

<%# include("student_header.ejs"); -%>
<link rel="stylesheet" src="../css/scatter.css" />

<script>
  var users = <%- JSON.stringify(users) %>;
  console.log(users)

  var statuses = <%- JSON.stringify(statuses) %>;
  console.log(statuses)

  var lName = <%- JSON.stringify(lName) %>
  console.log(lName)

  var avgGpa = 0
  var avgSatMath = 0
  var avgSatEbrw = 0
  var weightedAvg = 0
  for (var i = 0; i < users.length; i++) {
      avgGpa += parseFloat(users[i].GPA)
      avgSatMath += parseInt(users[i].SAT_math)
      avgSatEbrw += parseInt(users[i].SAT_EBRW)
  }
  avgGpa = avgGpa / users.length
  avgSatMath = avgSatMath / users.length
  avgSatEbrw = avgSatEbrw / users.length

  function getStatus(users, statuses) {
      var status = "";
      statuses.forEach(element => {
          if (users.userid == element.userid) {
              status = element.status
          }
      })
      return status
  }



  function getWeightedAvg(users) {
      var subjectTestCounter = 0;
      var subjectTestWeight = 0;
      var SATFull = 0;
      var ACTFull = 0;
      var fullWeight = 0;
      if (isNaN(parseInt(users.SAT_literature))) {
          subjectTestWeight += 0
      } else {
          subjectTestWeight += ((parseInt(users.SAT_literature) / 800) * 0.05)
          subjectTestCounter++
      }
      if (isNaN(parseInt(users.SAT_US_hist))) {
          subjectTestWeight += 0
      } else {
          subjectTestWeight += ((parseInt(users.SAT_US_hist) / 800) * 0.05)
          subjectTestCounter++
      }
      if (isNaN(parseInt(users.SAT_world_hist))) {
          subjectTestWeight += 0
      } else {
          subjectTestWeight += ((parseInt(users.SAT_world_hist) / 800) * 0.05)
          subjectTestCounter++
      }
      if (isNaN(parseInt(users.SAT_math_I))) {
          subjectTestWeight += 0
      } else {
          subjectTestWeight += ((parseInt(users.SAT_math_I) / 800) * 0.05)
          subjectTestCounter++
      }
      if (isNaN(parseInt(users.SAT_math_II))) {
          subjectTestWeight += 0
      } else {
          subjectTestWeight += ((parseInt(users.SAT_math_II) / 800) * 0.05)
          subjectTestCounter++
      }
      if (isNaN(parseInt(users.SAT_eco_bio))) {
          subjectTestWeight += 0
      } else {
          subjectTestWeight += ((parseInt(users.SAT_eco_bio) / 800) * 0.05)
          subjectTestCounter++
      }
      if (isNaN(parseInt(users.SAT_mol_bio))) {
          subjectTestWeight += 0
      } else {
          subjectTestWeight += ((parseInt(users.SAT_mol_bio) / 800) * 0.05)
          subjectTestCounter++
      }
      if (isNaN(parseInt(users.SAT_chemistry))) {
          subjectTestWeight += 0
      } else {
          subjectTestWeight += ((parseInt(users.SAT_chemistry) / 800) * 0.05)
          subjectTestCounter++
      }
      if (isNaN(parseInt(users.SAT_physics))) {
          subjectTestWeight += 0
      } else {
          subjectTestWeight += ((parseInt(users.SAT_physics) / 800) * 0.05)
          subjectTestCounter++
      }
      majorTestWeight = 1 - (0.05 * subjectTestCounter)
      if (isNaN(parseInt(users.SAT_math)) == false && isNaN(parseInt(users.SAT_EBRW)) == false && isNaN(parseInt(users.ACT_composite)) == false) {
          SATFull = (parseInt(users.SAT_math) + parseInt(users.SAT_EBRW)) / 1600
          ACTFull = (parseInt(users.ACT_composite) / 36)
          fullWeight = ((SATFull * (majorTestWeight / 2)) + (ACTFull * (majorTestWeight / 2)) + subjectTestWeight) * 100
          return fullWeight
      } else if (isNaN(parseInt(users.SAT_math)) == false && isNaN(parseInt(users.SAT_EBRW)) == false && isNaN(parseInt(users.ACT_composite)) == true) {
          SATFull = (parseInt(users.SAT_math) + parseInt(users.SAT_EBRW)) / 1600
          fullWeight = ((SATFull * majorTestWeight) + subjectTestWeight) * 100
          return fullWeight
      } else {
          ACTFull = (parseInt(users.ACT_composite) / 36)
          fullWeight = ((ACTFull * majorTestWeight) + subjectTestWeight) * 100
          return fullWeight
      }

  }
  users.forEach(element => {
      weightedAvg += getWeightedAvg(element)
  });
  weightedAvg = weightedAvg / users.length
  console.log(avgGpa, avgSatEbrw, avgSatMath, weightedAvg)
</script>

<script>
  //set the dimensions and margins of the graph
  // var margin = {top: 100, right: 30, bottom: 30, left: 300},
  //     width = 1000 - margin.left - margin.right,
  //     height = 600 - margin.top - margin.bottom;

  // // append the svg object to the body of the page
  // var svg = d3.select("#my_dataviz")
  //   .append("svg")
  //     .attr("width", width + margin.left + margin.right)
  //     .attr("height", height + margin.top + margin.bottom)
  //   .append("g")
  //     .attr("transform",
  //           "translate(" + margin.left + "," + margin.top + ")");

  //Read the data
  //d3.csv("https://raw.githubusercontent.com/holtzy/data_to_viz/master/Example_dataset/2_TwoNum.csv", function(data) {

  // console.log(users, "Hello you have reached me")
  function drawgraph(users) {
    console.log(users, "Start of function");
    var body = d3.select("body");
    var selectData = [
      {
        text: "SAT EBRW + Math",
      },
      {
        text: "ACT Composite",
      },
      {
        text: "Weighted Average",
      },
    ];

    // Select X-axis Variable
    var span = body.append("span").text("Select X-Axis variable: ");
    var yInput = body
      .append("select")
      .attr("id", "xSelect")
      .on("change", xChange)
      .selectAll("option")
      .data(selectData)
      .enter()
      .append("option")
      .attr("value", function (d) {
        return d.text;
      })
      .text(function (d) {
        return d.text;
      });
    body.append("br");

    // Variables
    var body = d3.select("body");
    var margin = {
      top: 100,
      right: 30,
      bottom: 30,
      left: 300,
    };
    var h = 800 - margin.left - margin.right;
    var w = 600 - margin.top - margin.bottom;
    //var formatPercent = d3.format('.2%')
    // Scales
    function colorScale(d) {
      console.log("Status:", getStatus(d, statuses));
      if (d.userid == "me") {
        color = "blue";
      } else if (getStatus(d, statuses) == "accepted") {
        var color = "green";
      } else if (getStatus(d, statuses) == "denied") {
        var color = "red";
      } else if (
        getStatus(d, statuses) == "pending" ||
        getStatus(d) == "wait-listed"
      ) {
        var color = "yellow";
      }

      return color;
    }
    var xScale = d3
      .scaleLinear()
      .domain([d3.min([0, 0]), d3.max([0, 1600])])
      .range([0, w]);
    console.log("xScale domain:", xScale.domain());
    var yScale = d3
      .scaleLinear()
      .domain([
        d3.min([0, 0]),
        d3.max([
          0,
          d3.max(users, function (users) {
            return parseFloat(users.GPA);
          }),
        ]),
      ])
      .range([h, 0]);
    console.log("yScale domain:", yScale.domain());
    // SVG
    var svg = body
      .append("svg")
      .attr("height", h + margin.top + margin.bottom)
      .attr("width", w + margin.left + margin.right)
      .append("g")
      .attr("transform", "translate(" + margin.left + "," + margin.top + ")");
    // X-axis
    var xAxis = d3
      .axisBottom()
      .scale(xScale)
      //.tickFormat(formatPercent)
      .ticks(10);

    // Y-axis
    var yAxis = d3
      .axisLeft()
      .scale(yScale)
      // .tickFormat(formatPercent)
      .ticks(10);

    // Circles
    var circles = svg
      .selectAll("circle")
      .data(users)
      .enter()
      .append("circle")
      .attr("cx", function (users) {
        return xScale(parseInt(users.SAT_EBRW) + parseInt(users.SAT_math));
      })
      .attr("cy", function (users) {
        console.log("Gpas:", parseFloat(users.GPA));
        return yScale(parseFloat(users.GPA));
      })
      .attr("r", "5")
      .attr("stroke", "black")
      .attr("stroke-width", 1)
      .attr("fill", function (users, i) {
        return colorScale(users);
      })
      .on("mouseover", function () {
        d3.select(this)
          .transition()
          .duration(500)
          .attr("r", 10)
          .attr("stroke-width", 3);
      })
      .on("mouseout", function () {
        d3.select(this)
          .transition()
          .duration(500)
          .attr("r", 5)
          .attr("stroke-width", 1);
      })
      .append("title") // Tooltip
      .text(function (users) {
        return (
          users.userid +
          "\nGpa: " +
          parseFloat(users.GPA) +
          "\nSAT Score: " +
          (parseInt(users.SAT_EBRW) + parseInt(users.SAT_math)) +
          "\nACT Score: " +
          parseInt(users.ACT_composite) +
          "\nWeighted Avg: " +
          getWeightedAvg(users)
        );
      });
      
    //Dashed Line
    var avgline = d3.line()
        .x(avgGpa)
        .y(40);
    console.log(avgline.y)
    svg.append("path")
    .attr({
        d: avgline,
        stroke: "black",
        "stroke-width": 1,
        fill: "none",
        "stroke-dasharray": "5,5",
    });
    console.log()

    // X-axis
    svg.append("g")
      .attr("class", "axis")
      .attr("id", "xAxis")
      .attr("transform", "translate(0," + h + ")")
      .call(xAxis)
    svg.append("text") // X-axis Label
      .attr("id", "xAxisLabel")
      .attr("y", w-20)
      .attr("x", w)
      .attr("dy", ".71em")
      .style("text-anchor", "end")
      .text("SAT EBRW + Math");
    // Y-axis
    svg.append("g")
      .attr("class", "axis")
      .attr("id", "yAxis")
      .call(yAxis)
    svg.append("text") // y-axis Label
      .attr("id", "yAxisLabel")
      .attr("transform", "rotate(-90)")
      .attr("x", 0)
      .attr("y", 5)
      .attr("dy", ".71em")
      .style("text-anchor", "end")
      .text("GPA");




    function xChange() {
      var value = this.value; // get the new x value
      console.log("Changing Value:", value);
      if (value == "SAT EBRW + Math") {
        xScale // change the xScale
          .domain([d3.min([0, 0]), d3.max([0, 1600])]);
        xAxis.scale(xScale); // change the xScale
        d3.select("#xAxis") // redraw the xAxis
          .transition()
          .duration(1000)
          .call(xAxis);
        d3.select("#xAxisLabel") // change the xAxisLabel
          .transition()
          .duration(1000)
          .text(value);
        d3.selectAll("circle") // move the circles
          .transition()
          .duration(1000)
          .delay(function (users, i) {
            return i * 100;
          })
          .attr("cx", function (users) {
            return xScale(parseInt(users.SAT_EBRW) + parseInt(users.SAT_math));
          });
      }
      if (value == "ACT Composite") {
        xScale // change the xScale
          .domain([d3.min([0, 0]), d3.max([0, 36])]);
        xAxis.scale(xScale); // change the xScale
        d3.select("#xAxis") // redraw the xAxis
          .transition()
          .duration(1000)
          .call(xAxis);
        d3.select("#xAxisLabel") // change the xAxisLabel
          .transition()
          .duration(1000)
          .text(value);
        d3.selectAll("circle") // move the circles
          .transition()
          .duration(1000)
          .delay(function (users, i) {
            return i * 100;
          })
          .attr("cx", function (users) {
            return xScale(parseInt(users.ACT_composite));
          });
      }
      if (value == "Weighted Average") {
        xScale // change the xScale
          .domain([d3.min([0, 0]), d3.max([0, 100])]);
        xAxis.scale(xScale); // change the xScale
        d3.select("#xAxis") // redraw the xAxis
          .transition()
          .duration(1000)
          .call(xAxis);
        d3.select("#xAxisLabel") // change the xAxisLabel
          .transition()
          .duration(1000)
          .text(value);
        d3.selectAll("circle") // move the circles
          .transition()
          .duration(1000)
          .delay(function (users, i) {
            return i * 100;
          })
          .attr("cx", function (users) {
            return xScale(getWeightedAvg(users));
          });
      }
    }
  }
  // //users.forEach(data => {

  // // Add X axis
  // var x = d3.scaleLinear()
  //   .domain([0, 36])
  //   .range([ 0, width ]);
  // svg.append("g")
  //   .attr("transform", "translate(0," + height + ")")
  //   .call(d3.axisBottom(x));

  // // Add Y axis
  // var y = d3.scaleLinear()
  //   .domain([0, 4])
  //   .range([ height, 0]);
  // svg.append("g")
  //   .call(d3.axisLeft(y));

  //   //var student = {"userid":"me", " GPA":<%# gpa %>, " ACT_English":25};

  //   //data.push(student);
  //   function color(d){
  //       var color = "black"
  //       if (d.userid == "me"){
  //           color = "blue"
  //       }
  //       return color;
  //   }
  // // Add dots
  // svg.append('g')
  //   .selectAll("dot")
  //   .data(users)
  //   .enter()
  //   .append("circle")
  //     .attr("cx", function (users) {console.log(users.ACT_composite); return x(users.ACT_composite); } )
  //     .attr("cy", function (users) { return y(users.GPA); } )
  //     .attr("r", 1.5)
  //     .style("fill", color)

  //})
  // }
  drawgraph(users);
</script>
